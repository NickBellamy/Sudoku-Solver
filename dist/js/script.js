function solve(){let e=!1;do{for(e=!1,i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)&&eliminateCorrespondingCandidates(i,j);for(i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)||(trySolveForSingleCandidate(i,j),!e&&isSolved(i,j)&&(e=!0));console.log("Loop complete!  hasBeenSolved is: "+e)}while(e)}function eliminateCorrespondingCandidates(e,t){const a=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');let o=[...document.querySelectorAll('[data-row="'+e+'"], [data-col="'+t+'"]'),...a.parentElement.children];(o=(o=[...new Set(o)]).filter(e=>!isSolved(e.dataset.row,e.dataset.col))).forEach(function(e){removeCandidate(parseInt(e.dataset.row),parseInt(e.dataset.col),parseInt(a.value))})}function removeCandidate(e,t,a){let o=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]'),d=JSON.parse(o.dataset.candidates);d=d.filter(e=>e!==a);let n=JSON.stringify(d);document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').dataset.candidates=n,console.log(a+" removed from "+e+":"+t)}function trySolveForSingleCandidate(e,t){let a=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');return candidates=JSON.parse(a.dataset.candidates),1==candidates.length&&(a.value=candidates[0],!0)}function isSolved(e,t){return!!document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').value}document.getElementById("solve").addEventListener("click",solve),document.querySelectorAll("input[type=number]").forEach(function(e){e.addEventListener("change",function(){this.dataset.candidates="["+this.value+"]",console.log(this)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogRXZlbnQgbGlzdGVuZXJzIGZvciBpbnB1dHMgKi9cclxuXHJcbi8vIEV2ZW50IGxpc3RlbmVyIGZvciBcIlN1Ym1pdFwiIGJ1dHRvblxyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc29sdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNvbHZlKTtcclxuXHJcbi8vIEV2ZW50IGxpc3RlbmVyIGZvciBhbGwgaW5wdXRzXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9bnVtYmVyXScpLmZvckVhY2goZnVuY3Rpb24gKGlucCkge1xyXG4gICAgaW5wLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBTZXQgdGhpcyBpbnB1dCdzIGNhbmRpZGF0ZXMgdG8gb25seSB0aGlzIGlucHV0J3MgdmFsdWVcclxuICAgICAgICB0aGlzLmRhdGFzZXQuY2FuZGlkYXRlcyA9ICdbJyArIHRoaXMudmFsdWUgKyAnXSc7XHJcblxyXG4gICAgICAgIC8vIERlYnVnIGxvZ1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuLy8gSXRlcmF0ZSB0aHJvdWdoIGlucHV0cyB0cnlpbmcgdG8gc29sdmVcclxuZnVuY3Rpb24gc29sdmUoKSB7XHJcbiAgICBsZXQgc29sdmVGb3VuZFRoaXNMb29wID0gZmFsc2U7XHJcbiAgICBkbyB7XHJcbiAgICAgICAgLy8gUmVzZXQgZmxhZ1xyXG4gICAgICAgIHNvbHZlRm91bmRUaGlzTG9vcCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgc29sdmVkIGlucHV0c1xyXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPD0gOTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPD0gOTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBzb2x2ZWQsIGVsaW1pbmF0ZSBjb3JyZXNwb25kaW5nIGNhbmRpZGF0ZXMgaW4gb3RoZXIgcG9zaXRpb25zXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTb2x2ZWQoaSwgaikpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGltaW5hdGVDb3JyZXNwb25kaW5nQ2FuZGlkYXRlcyhpLCBqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIHVuc29sdmVkIGlucHV0c1xyXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPD0gOTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPD0gOTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB1bnNvbHZlZCwgYXR0ZW1wdCB0byBzb2x2ZVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc1NvbHZlZChpLCBqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbHZlIGlucHV0IGlmIHRoZXJlJ3Mgb25seSBvbmUgY2FuZGlkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5U29sdmVGb3JTaW5nbGVDYW5kaWRhdGUoaSwgaik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgc29sdmVGb3VuZFRoaXNMb29wIGlzIGZhbHNlIGFuZCBhIG5ldyBzb2x1dGlvbiBoYXMgYmVlbiBmb3VuZCwgc2V0IHNvbHZlRm91bmRUaGlzTG9vcCB0byB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzb2x2ZUZvdW5kVGhpc0xvb3AgJiYgaXNTb2x2ZWQoaSwgaikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc29sdmVGb3VuZFRoaXNMb29wID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRGVidWcgTG9nXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJMb29wIGNvbXBsZXRlISAgaGFzQmVlblNvbHZlZCBpczogXCIgKyBzb2x2ZUZvdW5kVGhpc0xvb3ApO1xyXG4gICAgfSB3aGlsZSAoc29sdmVGb3VuZFRoaXNMb29wKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZWxpbWluYXRlQ29ycmVzcG9uZGluZ0NhbmRpZGF0ZXMocm93LCBjb2wpIHtcclxuXHJcbiAgICAvLyBHZXQgdmFsdWUgbG9jYXRpb24gZnJvbSByb3csIGNvbFxyXG4gICAgY29uc3QgbG9jYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJyk7XHJcbiAgICBcclxuICAgIC8vIEFycmF5IG9mIGFsbCBlbGVtZW50cyBpbiByb3csIGNvbHVtbiwgYW5kIGdyb3VwXHJcbiAgICBsZXQgZWxlbWVudHNUb0VsaW1pbmF0ZSA9IFtcclxuICAgICAgICAuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXSwgW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKSxcclxuICAgICAgICAuLi5sb2NhdGlvbi5wYXJlbnRFbGVtZW50LmNoaWxkcmVuXHJcbiAgICBdXHJcblxyXG4gICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXNcclxuICAgIGVsZW1lbnRzVG9FbGltaW5hdGUgPSBbLi4ubmV3IFNldChlbGVtZW50c1RvRWxpbWluYXRlKV1cclxuICAgIC8vIFJlbW92ZSBzb2x2ZWQgaW5wdXRzXHJcbiAgICBlbGVtZW50c1RvRWxpbWluYXRlID0gZWxlbWVudHNUb0VsaW1pbmF0ZS5maWx0ZXIoZWxlbWVudCA9PiAhKGlzU29sdmVkKGVsZW1lbnQuZGF0YXNldC5yb3csIGVsZW1lbnQuZGF0YXNldC5jb2wpKSk7XHJcbiAgICAvLyBSZW1vdmUgdmFsdWUgZnJvbSByZW1haW5pbmcgY2FuZGlkYXRlc1xyXG4gICAgZWxlbWVudHNUb0VsaW1pbmF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmVtb3ZlQ2FuZGlkYXRlKHBhcnNlSW50KGVsZW1lbnQuZGF0YXNldC5yb3cpLCBwYXJzZUludChlbGVtZW50LmRhdGFzZXQuY29sKSwgcGFyc2VJbnQobG9jYXRpb24udmFsdWUpKTtcclxuICAgIH0pXHJcblxyXG59XHJcblxyXG4vLyBSZW1vdmUgdmFsdWUgZnJvbSBjYW5kaWRhdGVzIGF0IGxvY2F0aW9uIChyb3cvY29sKVxyXG5mdW5jdGlvbiByZW1vdmVDYW5kaWRhdGUocm93LCBjb2wsIHZhbHVlKSB7XHJcbiAgICAvLyBTZWxlY3QgbG9jYXRpb24gZGVwZW5kaW5nIG9uIHJvdyBhbmQgY29sXHJcbiAgICBsZXQgbG9jYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJyk7XHJcbiAgICAvLyBQYXJzZSBKU09OXHJcbiAgICBsZXQgY2FuZGlkYXRlcyA9IEpTT04ucGFyc2UobG9jYXRpb24uZGF0YXNldC5jYW5kaWRhdGVzKTtcclxuICAgIC8vIFJlbW92ZSB2YWx1ZSBmcm9tIGNhbmRpZGF0ZXMgYXJyYXlcclxuICAgIGNhbmRpZGF0ZXMgPSBjYW5kaWRhdGVzLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IHZhbHVlKTtcclxuICAgIC8vIENvbnZlcnQgYmFjayBpbnRvIEpTT04gb2JqZWN0XHJcbiAgICBsZXQgcmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkoY2FuZGlkYXRlcyk7XHJcbiAgICAvLyBVcGRhdGUgZGF0YS1jYW5kaWRhdGVzIGF0dHJpYnV0ZSBhdCBsb2NhdGlvblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl1bZGF0YS1jb2w9XCInICsgY29sICsgJ1wiXScpLmRhdGFzZXQuY2FuZGlkYXRlcyA9IHJlc3VsdDtcclxuICAgIC8vIERlYnVnIGxvZ1xyXG4gICAgY29uc29sZS5sb2codmFsdWUgKyBcIiByZW1vdmVkIGZyb20gXCIgKyByb3cgKyBcIjpcIiArIGNvbCk7XHJcbn1cclxuXHJcbi8vIElmIHRoZXJlIGlzIG9ubHkgb25lIGNhbmRpZGF0ZSBhdCBsb2NhdGlvbiwgc2V0IHRoYXQgaW5wdXQncyB2YWx1ZSB0byB0aGUgY2FuZGlkYXRlIGFuZCByZXR1cm4gdHJ1ZVxyXG5mdW5jdGlvbiB0cnlTb2x2ZUZvclNpbmdsZUNhbmRpZGF0ZShyb3csIGNvbCkge1xyXG4gICAgLy8gU2VsZWN0IGxvY2F0aW9uIGRlcGVuZGluZyBvbiByb3cgYW5kIGNvbFxyXG4gICAgbGV0IGxvY2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl1bZGF0YS1jb2w9XCInICsgY29sICsgJ1wiXScpO1xyXG4gICAgLy8gUGFyc2UgSlNPTlxyXG4gICAgY2FuZGlkYXRlcyA9IEpTT04ucGFyc2UobG9jYXRpb24uZGF0YXNldC5jYW5kaWRhdGVzKTtcclxuICAgIC8vIElmIG9ubHkgb25lIGNhbmRpZGF0ZSBhdCBsb2NhdGlvbiwgc2V0IGxvY2F0aW9uJ3MgdmFsdWVcclxuICAgIGlmIChjYW5kaWRhdGVzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgbG9jYXRpb24udmFsdWUgPSBjYW5kaWRhdGVzWzBdO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFJldHVybnMgdHJ1ZSBpZiBpbnB1dCBoYXMgYSBudW1lcmljYWwgdmFsdWVcclxuZnVuY3Rpb24gaXNTb2x2ZWQocm93LCBjb2wpIHtcclxuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJykudmFsdWUgPyB0cnVlIDogZmFsc2U7XHJcbn1cclxuXHJcblxyXG4vKiByZW1vdmVPdGhlckNhbmRpZGF0ZXMoKSBub3QgY3VycmVudGx5IG5lZWRlZFxyXG5idXQgSSdtIGxlYXZpbmcgdGhlIGNvZGUgaW4gaGVyZSBpbiBjYXNlIEkgbmVlZCBpdCBsYXRlciEgKi9cclxuXHJcbi8vIC8vIFJlbW92ZSBhbGwgY2FuZGlkYXRlcyBhdCBsb2NhdGlvbiBleGNlcHQgdmFsdWVcclxuLy8gZnVuY3Rpb24gcmVtb3ZlT3RoZXJDYW5kaWRhdGVzKHJvdywgY29sKSB7XHJcbi8vICAgICBsZXQgdmFsdWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJykudmFsdWU7XHJcbi8vICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJykuZGF0YXNldC5jYW5kaWRhdGVzID0gJ1snICsgdmFsdWUgKyAnXSc7XHJcblxyXG4vLyAgICAgLy8gRGVidWcgbG9nXHJcbi8vICAgICBjb25zb2xlLmxvZygnRW1wdGllZCBhbGwgYnV0ICcgKyB2YWx1ZSArICcgYXQgJyArIHJvdyArICc6JyArIGNvbCArJyEnKTtcclxuLy8gICAgIGNvbnNvbGUubG9nKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKSk7XHJcbi8vIH0iXX0=
