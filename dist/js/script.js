function solve(){let e=!1;do{for(e=!1,i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)&&eliminateCorrespondingCandidates(i,j);for(i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)||(trySolveForSingleCandidate(i,j),!e&&isSolved(i,j)&&(e=!0));console.log("Loop complete!  hasBeenSolved is: "+e)}while(e&&!isSudokuComplete())}function eliminateCorrespondingCandidates(e,t){const o=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');let n=[...document.querySelectorAll('[data-row="'+e+'"], [data-col="'+t+'"]'),...o.parentElement.children];(n=(n=[...new Set(n)]).filter(e=>!isSolved(e.dataset.row,e.dataset.col))).forEach(function(e){removeCandidate(parseInt(e.dataset.row),parseInt(e.dataset.col),parseInt(o.value))})}function removeCandidate(e,t,o){let n=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]'),a=JSON.parse(n.dataset.candidates);a=a.filter(e=>e!==o);let l=JSON.stringify(a);n.dataset.candidates=l,console.log(o+" removed from "+e+":"+t)}function trySolveForSingleCandidate(e,t){let o=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');return candidates=JSON.parse(o.dataset.candidates),1==candidates.length&&(o.value=candidates[0],!0)}function isSolved(e,t){return!!document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').value}function isSudokuComplete(){let e=Array.from(document.querySelectorAll("input[type=number]"));return 81===(e=e.filter(e=>e.value.length>0)).length?console.log("Sudoku Completed!"):console.log("Sudoku not completed: only "+e.length+"/81 inputs solved!"),81===e.length}function blockColRowInteraction(){Array.from(document.getElementsByClassName("group")).forEach(function(e){let t=Array.from(e.children);t=t.filter(e=>e.value<1);for(let e=1;e<=9;e++){let o=[];if(t.forEach(function(t){JSON.parse(t.dataset.candidates).includes(e)&&o.push([t.dataset.row,t.dataset.col])}),o.every(e=>e[0]===o[0][0])&&o.length>1){let t=[];o.forEach(function(e){t.push(parseInt(e[1]))});for(let n=1;n<=9;n++)t.includes(n)||removeCandidate(o[0][0],n,e)}if(o.every(e=>e[1]===o[0][1])&&o.length>1){let t=[];o.forEach(function(e){t.push(parseInt(e[0]))});for(let n=1;n<=9;n++)t.includes(n)||removeCandidate(o[0][1],n,e)}}})}document.getElementById("solve").addEventListener("click",solve),document.querySelectorAll("input[type=number]").forEach(function(e){e.addEventListener("change",function(){this.dataset.candidates="["+this.value+"]",console.log(this)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
