function solve(){let e=!1;do{for(e=!1,i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)&&eliminateCorrespondingCandidates(i,j);for(i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)||(trySolveForSingleCandidate(i,j),!e&&isSolved(i,j)&&(e=!0));console.log("Loop complete!  hasBeenSolved is: "+e)}while(e&&!isSudokuComplete())}function eliminateCorrespondingCandidates(e,t){const o=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');let n=[...document.querySelectorAll('[data-row="'+e+'"], [data-col="'+t+'"]'),...o.parentElement.children];(n=(n=[...new Set(n)]).filter(e=>!isSolved(e.dataset.row,e.dataset.col))).forEach(function(e){removeCandidate(parseInt(e.dataset.row),parseInt(e.dataset.col),parseInt(o.value))})}function removeCandidate(e,t,o){let n=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]'),a=JSON.parse(n.dataset.candidates);a=a.filter(e=>e!==o);let l=JSON.stringify(a);n.dataset.candidates=l,console.log(o+" removed from "+e+":"+t)}function trySolveForSingleCandidate(e,t){let o=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');return candidates=JSON.parse(o.dataset.candidates),1==candidates.length&&(o.value=candidates[0],!0)}function isSolved(e,t){return!!document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').value}function isSudokuComplete(){let e=Array.from(document.querySelectorAll("input[type=number]"));return 81===(e=e.filter(e=>e.value.length>0)).length?console.log("Sudoku Completed!"):console.log("Sudoku not completed: only "+e.length+"/81 inputs solved!"),81===e.length}function blockColRowInteraction(){}document.getElementById("solve").addEventListener("click",solve),document.querySelectorAll("input[type=number]").forEach(function(e){e.addEventListener("change",function(){this.dataset.candidates="["+this.value+"]",console.log(this)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
