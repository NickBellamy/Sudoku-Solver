function solve(){let e=!1;do{e=!1,eliminateCorrespondingCandidates(),(e=trySolve())||(blockColRowInteraction(),e=trySolve()),console.log("Loop complete!  hasBeenSolved is: "+e)}while(e&&!isSudokuComplete())}function eliminateCorrespondingCandidates(){for(row=1;row<=9;row++)for(col=1;col<=9;col++)if(isSolved(row,col)){const e=document.querySelector('[data-row="'+row+'"][data-col="'+col+'"]');let o=[...document.querySelectorAll('[data-row="'+row+'"], [data-col="'+col+'"]'),...e.parentElement.children];(o=(o=[...new Set(o)]).filter(e=>!isSolved(e.dataset.row,e.dataset.col))).forEach(function(o){removeCandidate(parseInt(o.dataset.row),parseInt(o.dataset.col),parseInt(e.value))})}}function removeCandidate(e,o,t){let l=document.querySelector('[data-row="'+e+'"][data-col="'+o+'"]'),a=JSON.parse(l.dataset.candidates);a=a.filter(e=>e!==t);let n=JSON.stringify(a);l.dataset.candidates=n,console.log(t+" removed from "+e+":"+o)}function trySolve(){let e=!1;for(row=1;row<=9;row++)for(col=1;col<=9;col++)if(!isSolved(row,col)){let o=document.querySelector('[data-row="'+row+'"][data-col="'+col+'"]');candidates=JSON.parse(o.dataset.candidates),1==candidates.length&&(o.value=candidates[0],e=!0)}return e}function isSolved(e,o){return!!document.querySelector('[data-row="'+e+'"][data-col="'+o+'"]').value}function isSudokuComplete(){let e=Array.from(document.querySelectorAll("input[type=number]"));return 81===(e=e.filter(e=>e.value.length>0)).length?console.log("Sudoku Completed!"):console.log("Sudoku not completed: only "+e.length+"/81 inputs solved!"),81===e.length}function blockColRowInteraction(){Array.from(document.getElementsByClassName("group")).forEach(function(e){let o=Array.from(e.children);o=o.filter(e=>e.value<1);for(let e=1;e<=9;e++){let t=[];o.forEach(function(o){JSON.parse(o.dataset.candidates).includes(e)&&t.push([o.dataset.row,o.dataset.col])});for(let o=0;o<=1;o++)if(t.every(e=>e[o]===t[0][o])&&t.length>1){let l=[];t.forEach(function(e){l.push(parseInt(e[Math.abs(o-1)]))});for(let a=1;a<=9;a++)l.includes(a)||(0===o?removeCandidate(t[0][0],a,e):removeCandidate(a,t[0][1],e))}}})}document.getElementById("solve").addEventListener("click",solve),document.querySelectorAll("input[type=number]").forEach(function(e){e.addEventListener("change",function(){this.dataset.candidates="["+this.value+"]",console.log(this)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
