function solve(){let e=!1;do{for(e=!1,i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)&&eliminateCorrespondingCandidates(i,j);for(i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)||(trySolveForSingleCandidate(i,j),!e&&isSolved(i,j)&&(e=!0));console.log("Loop complete!  hasBeenSolved is: "+e)}while(e)}function eliminateCorrespondingCandidates(e,t){const a=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');let o=[...document.querySelectorAll('[data-row="'+e+'"], [data-col="'+t+'"]'),...a.parentElement.children];(o=(o=[...new Set(o)]).filter(e=>!isSolved(e.dataset.row,e.dataset.col))).forEach(function(e){removeCandidate(parseInt(e.dataset.row),parseInt(e.dataset.col),parseInt(a.value))})}function removeCandidate(e,t,a){let o=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]'),d=JSON.parse(o.dataset.candidates);d=d.filter(e=>e!==a);let n=JSON.stringify(d);document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').dataset.candidates=n,console.log(a+" removed from "+e+":"+t)}function trySolveForSingleCandidate(e,t){let a=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');return candidates=JSON.parse(a.dataset.candidates),1==candidates.length&&(document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').value=candidates[0],!0)}function isSolved(e,t){return!!document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').value}document.getElementById("solve").addEventListener("click",solve),document.querySelectorAll("input[type=number]").forEach(function(e){e.addEventListener("change",function(){this.dataset.candidates="["+this.value+"]",console.log(this)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEV2ZW50IGxpc3RlbmVycyBmb3IgaW5wdXRzICovXHJcblxyXG4vLyBFdmVudCBsaXN0ZW5lciBmb3IgXCJTdWJtaXRcIiBidXR0b25cclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvbHZlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzb2x2ZSk7XHJcblxyXG4vLyBFdmVudCBsaXN0ZW5lciBmb3IgYWxsIGlucHV0c1xyXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPW51bWJlcl0nKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnApIHtcclxuICAgIGlucC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gU2V0IHRoaXMgaW5wdXQncyBjYW5kaWRhdGVzIHRvIG9ubHkgdGhpcyBpbnB1dCdzIHZhbHVlXHJcbiAgICAgICAgdGhpcy5kYXRhc2V0LmNhbmRpZGF0ZXMgPSAnWycgKyB0aGlzLnZhbHVlICsgJ10nO1xyXG5cclxuICAgICAgICAvLyBEZWJ1ZyBsb2dcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbi8vIEl0ZXJhdGUgdGhyb3VnaCBpbnB1dHMgdHJ5aW5nIHRvIHNvbHZlXHJcbmZ1bmN0aW9uIHNvbHZlKCkge1xyXG4gICAgbGV0IHNvbHZlRm91bmRUaGlzTG9vcCA9IGZhbHNlO1xyXG4gICAgZG8ge1xyXG4gICAgICAgIC8vIFJlc2V0IGZsYWdcclxuICAgICAgICBzb2x2ZUZvdW5kVGhpc0xvb3AgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIHNvbHZlZCBpbnB1dHNcclxuICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IDk7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGogPSAxOyBqIDw9IDk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgc29sdmVkLCBlbGltaW5hdGUgY29ycmVzcG9uZGluZyBjYW5kaWRhdGVzIGluIG90aGVyIHBvc2l0aW9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzU29sdmVkKGksIGopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxpbWluYXRlQ29ycmVzcG9uZGluZ0NhbmRpZGF0ZXMoaSwgaik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSB1bnNvbHZlZCBpbnB1dHNcclxuICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IDk7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGogPSAxOyBqIDw9IDk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdW5zb2x2ZWQsIGF0dGVtcHQgdG8gc29sdmVcclxuICAgICAgICAgICAgICAgIGlmICghaXNTb2x2ZWQoaSwgaikpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTb2x2ZSBpbnB1dCBpZiB0aGVyZSdzIG9ubHkgb25lIGNhbmRpZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHRyeVNvbHZlRm9yU2luZ2xlQ2FuZGlkYXRlKGksIGopO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHNvbHZlRm91bmRUaGlzTG9vcCBpcyBmYWxzZSBhbmQgYSBuZXcgc29sdXRpb24gaGFzIGJlZW4gZm91bmQsIHNldCBzb2x2ZUZvdW5kVGhpc0xvb3AgdG8gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc29sdmVGb3VuZFRoaXNMb29wICYmIGlzU29sdmVkKGksIGopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvbHZlRm91bmRUaGlzTG9vcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIERlYnVnIExvZ1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTG9vcCBjb21wbGV0ZSEgIGhhc0JlZW5Tb2x2ZWQgaXM6IFwiICsgc29sdmVGb3VuZFRoaXNMb29wKTtcclxuICAgIH0gd2hpbGUgKHNvbHZlRm91bmRUaGlzTG9vcCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsaW1pbmF0ZUNvcnJlc3BvbmRpbmdDYW5kaWRhdGVzKHJvdywgY29sKSB7XHJcblxyXG4gICAgLy8gR2V0IHZhbHVlIGxvY2F0aW9uIGZyb20gcm93LCBjb2xcclxuICAgIGNvbnN0IGxvY2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl1bZGF0YS1jb2w9XCInICsgY29sICsgJ1wiXScpO1xyXG4gICAgXHJcbiAgICAvLyBBcnJheSBvZiBhbGwgZWxlbWVudHMgaW4gcm93LCBjb2x1bW4sIGFuZCBncm91cFxyXG4gICAgbGV0IGVsZW1lbnRzVG9FbGltaW5hdGUgPSBbXHJcbiAgICAgICAgLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl0sIFtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJyksXHJcbiAgICAgICAgLi4ubG9jYXRpb24ucGFyZW50RWxlbWVudC5jaGlsZHJlblxyXG4gICAgXVxyXG5cclxuICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzXHJcbiAgICBlbGVtZW50c1RvRWxpbWluYXRlID0gWy4uLm5ldyBTZXQoZWxlbWVudHNUb0VsaW1pbmF0ZSldXHJcbiAgICAvLyBSZW1vdmUgc29sdmVkIGlucHV0c1xyXG4gICAgZWxlbWVudHNUb0VsaW1pbmF0ZSA9IGVsZW1lbnRzVG9FbGltaW5hdGUuZmlsdGVyKGVsZW1lbnQgPT4gIShpc1NvbHZlZChlbGVtZW50LmRhdGFzZXQucm93LCBlbGVtZW50LmRhdGFzZXQuY29sKSkpO1xyXG4gICAgLy8gUmVtb3ZlIHZhbHVlIGZyb20gcmVtYWluaW5nIGNhbmRpZGF0ZXNcclxuICAgIGVsZW1lbnRzVG9FbGltaW5hdGUuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJlbW92ZUNhbmRpZGF0ZShwYXJzZUludChlbGVtZW50LmRhdGFzZXQucm93KSwgcGFyc2VJbnQoZWxlbWVudC5kYXRhc2V0LmNvbCksIHBhcnNlSW50KGxvY2F0aW9uLnZhbHVlKSk7XHJcbiAgICB9KVxyXG5cclxufVxyXG5cclxuLy8gUmVtb3ZlIHZhbHVlIGZyb20gY2FuZGlkYXRlcyBhdCBsb2NhdGlvbiAocm93L2NvbClcclxuZnVuY3Rpb24gcmVtb3ZlQ2FuZGlkYXRlKHJvdywgY29sLCB2YWx1ZSkge1xyXG4gICAgLy8gU2VsZWN0IGxvY2F0aW9uIGRlcGVuZGluZyBvbiByb3cgYW5kIGNvbFxyXG4gICAgbGV0IGxvY2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl1bZGF0YS1jb2w9XCInICsgY29sICsgJ1wiXScpO1xyXG4gICAgLy8gUGFyc2UgSlNPTlxyXG4gICAgbGV0IGNhbmRpZGF0ZXMgPSBKU09OLnBhcnNlKGxvY2F0aW9uLmRhdGFzZXQuY2FuZGlkYXRlcyk7XHJcbiAgICAvLyBSZW1vdmUgdmFsdWUgZnJvbSBjYW5kaWRhdGVzIGFycmF5XHJcbiAgICBjYW5kaWRhdGVzID0gY2FuZGlkYXRlcy5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSB2YWx1ZSk7XHJcbiAgICAvLyBDb252ZXJ0IGJhY2sgaW50byBKU09OIG9iamVjdFxyXG4gICAgbGV0IHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KGNhbmRpZGF0ZXMpO1xyXG4gICAgLy8gVXBkYXRlIGRhdGEtY2FuZGlkYXRlcyBhdHRyaWJ1dGUgYXQgbG9jYXRpb25cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKS5kYXRhc2V0LmNhbmRpZGF0ZXMgPSByZXN1bHQ7XHJcbiAgICAvLyBEZWJ1ZyBsb2dcclxuICAgIGNvbnNvbGUubG9nKHZhbHVlICsgXCIgcmVtb3ZlZCBmcm9tIFwiICsgcm93ICsgXCI6XCIgKyBjb2wpO1xyXG59XHJcblxyXG4vLyBJZiB0aGVyZSBpcyBvbmx5IG9uZSBjYW5kaWRhdGUgYXQgbG9jYXRpb24sIHNldCB0aGF0IGlucHV0J3MgdmFsdWUgdG8gdGhlIGNhbmRpZGF0ZSBhbmQgcmV0dXJuIHRydWVcclxuZnVuY3Rpb24gdHJ5U29sdmVGb3JTaW5nbGVDYW5kaWRhdGUocm93LCBjb2wpIHtcclxuICAgIC8vIFNlbGVjdCBsb2NhdGlvbiBkZXBlbmRpbmcgb24gcm93IGFuZCBjb2xcclxuICAgIGxldCBsb2NhdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKTtcclxuICAgIC8vIFBhcnNlIEpTT05cclxuICAgIGNhbmRpZGF0ZXMgPSBKU09OLnBhcnNlKGxvY2F0aW9uLmRhdGFzZXQuY2FuZGlkYXRlcyk7XHJcbiAgICBpZiAoY2FuZGlkYXRlcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKS52YWx1ZSA9IGNhbmRpZGF0ZXNbMF07XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gUmV0dXJucyB0cnVlIGlmIGlucHV0IGhhcyBhIG51bWVyaWNhbCB2YWx1ZVxyXG5mdW5jdGlvbiBpc1NvbHZlZChyb3csIGNvbCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKS52YWx1ZSA/IHRydWUgOiBmYWxzZTtcclxufVxyXG5cclxuXHJcbi8qIHJlbW92ZU90aGVyQ2FuZGlkYXRlcygpIG5vdCBjdXJyZW50bHkgbmVlZGVkXHJcbmJ1dCBJJ20gbGVhdmluZyB0aGUgY29kZSBpbiBoZXJlIGluIGNhc2UgSSBuZWVkIGl0IGxhdGVyISAqL1xyXG5cclxuLy8gLy8gUmVtb3ZlIGFsbCBjYW5kaWRhdGVzIGF0IGxvY2F0aW9uIGV4Y2VwdCB2YWx1ZVxyXG4vLyBmdW5jdGlvbiByZW1vdmVPdGhlckNhbmRpZGF0ZXMocm93LCBjb2wpIHtcclxuLy8gICAgIGxldCB2YWx1ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKS52YWx1ZTtcclxuLy8gICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKS5kYXRhc2V0LmNhbmRpZGF0ZXMgPSAnWycgKyB2YWx1ZSArICddJztcclxuXHJcbi8vICAgICAvLyBEZWJ1ZyBsb2dcclxuLy8gICAgIGNvbnNvbGUubG9nKCdFbXB0aWVkIGFsbCBidXQgJyArIHZhbHVlICsgJyBhdCAnICsgcm93ICsgJzonICsgY29sICsnIScpO1xyXG4vLyAgICAgY29uc29sZS5sb2coZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl1bZGF0YS1jb2w9XCInICsgY29sICsgJ1wiXScpKTtcclxuLy8gfSJdfQ==
