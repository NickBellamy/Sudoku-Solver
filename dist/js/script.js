function solve(){let e=!1;do{for(e=!1,i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)&&eliminateCorrespondingCandidates(i,j);for(i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)||(trySolveForSingleCandidate(i,j),!e&&isSolved(i,j)&&(e=!0));console.log("Loop complete!  hasBeenSolved is: "+e)}while(e)}function eliminateCorrespondingCandidates(e,t){const a=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');let o=[...document.querySelectorAll('[data-row="'+e+'"], [data-col="'+t+'"]'),...a.parentElement.children];(o=(o=[...new Set(o)]).filter(e=>!isSolved(e.dataset.row,e.dataset.col))).forEach(function(e){removeCandidate(parseInt(e.dataset.row),parseInt(e.dataset.col),parseInt(a.value))})}function removeCandidate(e,t,a){let o=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]'),n=JSON.parse(o.dataset.candidates);n=n.filter(e=>e!==a);let d=JSON.stringify(n);o.dataset.candidates=d,console.log(a+" removed from "+e+":"+t)}function trySolveForSingleCandidate(e,t){let a=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');return candidates=JSON.parse(a.dataset.candidates),1==candidates.length&&(a.value=candidates[0],!0)}function isSolved(e,t){return!!document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').value}document.getElementById("solve").addEventListener("click",solve),document.querySelectorAll("input[type=number]").forEach(function(e){e.addEventListener("change",function(){this.dataset.candidates="["+this.value+"]",console.log(this)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogRXZlbnQgbGlzdGVuZXJzIGZvciBpbnB1dHMgKi9cclxuXHJcbi8vIEV2ZW50IGxpc3RlbmVyIGZvciBcIlN1Ym1pdFwiIGJ1dHRvblxyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc29sdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNvbHZlKTtcclxuXHJcbi8vIEV2ZW50IGxpc3RlbmVyIGZvciBhbGwgaW5wdXRzXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9bnVtYmVyXScpLmZvckVhY2goZnVuY3Rpb24gKGlucCkge1xyXG4gICAgaW5wLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBTZXQgdGhpcyBpbnB1dCdzIGNhbmRpZGF0ZXMgdG8gb25seSB0aGlzIGlucHV0J3MgdmFsdWVcclxuICAgICAgICB0aGlzLmRhdGFzZXQuY2FuZGlkYXRlcyA9ICdbJyArIHRoaXMudmFsdWUgKyAnXSc7XHJcblxyXG4gICAgICAgIC8vIERlYnVnIGxvZ1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuLy8gSXRlcmF0ZSB0aHJvdWdoIGlucHV0cyB0cnlpbmcgdG8gc29sdmVcclxuZnVuY3Rpb24gc29sdmUoKSB7XHJcbiAgICBsZXQgc29sdmVGb3VuZFRoaXNMb29wID0gZmFsc2U7XHJcbiAgICBkbyB7XHJcbiAgICAgICAgLy8gUmVzZXQgZmxhZ1xyXG4gICAgICAgIHNvbHZlRm91bmRUaGlzTG9vcCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgc29sdmVkIGlucHV0c1xyXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPD0gOTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPD0gOTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBzb2x2ZWQsIGVsaW1pbmF0ZSBjb3JyZXNwb25kaW5nIGNhbmRpZGF0ZXMgaW4gb3RoZXIgcG9zaXRpb25zXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTb2x2ZWQoaSwgaikpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGltaW5hdGVDb3JyZXNwb25kaW5nQ2FuZGlkYXRlcyhpLCBqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIHVuc29sdmVkIGlucHV0c1xyXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPD0gOTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPD0gOTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB1bnNvbHZlZCwgYXR0ZW1wdCB0byBzb2x2ZVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc1NvbHZlZChpLCBqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbHZlIGlucHV0IGlmIHRoZXJlJ3Mgb25seSBvbmUgY2FuZGlkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5U29sdmVGb3JTaW5nbGVDYW5kaWRhdGUoaSwgaik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgc29sdmVGb3VuZFRoaXNMb29wIGlzIGZhbHNlIGFuZCBhIG5ldyBzb2x1dGlvbiBoYXMgYmVlbiBmb3VuZCwgc2V0IHNvbHZlRm91bmRUaGlzTG9vcCB0byB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzb2x2ZUZvdW5kVGhpc0xvb3AgJiYgaXNTb2x2ZWQoaSwgaikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc29sdmVGb3VuZFRoaXNMb29wID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRGVidWcgTG9nXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJMb29wIGNvbXBsZXRlISAgaGFzQmVlblNvbHZlZCBpczogXCIgKyBzb2x2ZUZvdW5kVGhpc0xvb3ApO1xyXG4gICAgfSB3aGlsZSAoc29sdmVGb3VuZFRoaXNMb29wKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZWxpbWluYXRlQ29ycmVzcG9uZGluZ0NhbmRpZGF0ZXMocm93LCBjb2wpIHtcclxuXHJcbiAgICAvLyBHZXQgdmFsdWUgbG9jYXRpb24gZnJvbSByb3csIGNvbFxyXG4gICAgY29uc3QgbG9jYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJyk7XHJcbiAgICBcclxuICAgIC8vIEFycmF5IG9mIGFsbCBlbGVtZW50cyBpbiByb3csIGNvbHVtbiwgYW5kIGdyb3VwXHJcbiAgICBsZXQgZWxlbWVudHNUb0VsaW1pbmF0ZSA9IFtcclxuICAgICAgICAuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXSwgW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKSxcclxuICAgICAgICAuLi5sb2NhdGlvbi5wYXJlbnRFbGVtZW50LmNoaWxkcmVuXHJcbiAgICBdXHJcblxyXG4gICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXNcclxuICAgIGVsZW1lbnRzVG9FbGltaW5hdGUgPSBbLi4ubmV3IFNldChlbGVtZW50c1RvRWxpbWluYXRlKV1cclxuICAgIC8vIFJlbW92ZSBzb2x2ZWQgaW5wdXRzXHJcbiAgICBlbGVtZW50c1RvRWxpbWluYXRlID0gZWxlbWVudHNUb0VsaW1pbmF0ZS5maWx0ZXIoZWxlbWVudCA9PiAhKGlzU29sdmVkKGVsZW1lbnQuZGF0YXNldC5yb3csIGVsZW1lbnQuZGF0YXNldC5jb2wpKSk7XHJcbiAgICAvLyBSZW1vdmUgdmFsdWUgZnJvbSByZW1haW5pbmcgY2FuZGlkYXRlc1xyXG4gICAgZWxlbWVudHNUb0VsaW1pbmF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmVtb3ZlQ2FuZGlkYXRlKHBhcnNlSW50KGVsZW1lbnQuZGF0YXNldC5yb3cpLCBwYXJzZUludChlbGVtZW50LmRhdGFzZXQuY29sKSwgcGFyc2VJbnQobG9jYXRpb24udmFsdWUpKTtcclxuICAgIH0pXHJcblxyXG59XHJcblxyXG4vLyBSZW1vdmUgdmFsdWUgZnJvbSBjYW5kaWRhdGVzIGF0IGxvY2F0aW9uIChyb3cvY29sKVxyXG5mdW5jdGlvbiByZW1vdmVDYW5kaWRhdGUocm93LCBjb2wsIHZhbHVlKSB7XHJcbiAgICAvLyBTZWxlY3QgbG9jYXRpb24gZGVwZW5kaW5nIG9uIHJvdyBhbmQgY29sXHJcbiAgICBsZXQgbG9jYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJyk7XHJcbiAgICAvLyBQYXJzZSBKU09OXHJcbiAgICBsZXQgY2FuZGlkYXRlcyA9IEpTT04ucGFyc2UobG9jYXRpb24uZGF0YXNldC5jYW5kaWRhdGVzKTtcclxuICAgIC8vIFJlbW92ZSB2YWx1ZSBmcm9tIGNhbmRpZGF0ZXMgYXJyYXlcclxuICAgIGNhbmRpZGF0ZXMgPSBjYW5kaWRhdGVzLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IHZhbHVlKTtcclxuICAgIC8vIENvbnZlcnQgYmFjayBpbnRvIEpTT04gb2JqZWN0XHJcbiAgICBsZXQgcmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkoY2FuZGlkYXRlcyk7XHJcbiAgICAvLyBVcGRhdGUgZGF0YS1jYW5kaWRhdGVzIGF0dHJpYnV0ZSBhdCBsb2NhdGlvblxyXG4gICAgbG9jYXRpb24uZGF0YXNldC5jYW5kaWRhdGVzID0gcmVzdWx0O1xyXG4gICAgLy8gRGVidWcgbG9nXHJcbiAgICBjb25zb2xlLmxvZyh2YWx1ZSArIFwiIHJlbW92ZWQgZnJvbSBcIiArIHJvdyArIFwiOlwiICsgY29sKTtcclxufVxyXG5cclxuLy8gSWYgdGhlcmUgaXMgb25seSBvbmUgY2FuZGlkYXRlIGF0IGxvY2F0aW9uLCBzZXQgdGhhdCBpbnB1dCdzIHZhbHVlIHRvIHRoZSBjYW5kaWRhdGUgYW5kIHJldHVybiB0cnVlXHJcbmZ1bmN0aW9uIHRyeVNvbHZlRm9yU2luZ2xlQ2FuZGlkYXRlKHJvdywgY29sKSB7XHJcbiAgICAvLyBTZWxlY3QgbG9jYXRpb24gZGVwZW5kaW5nIG9uIHJvdyBhbmQgY29sXHJcbiAgICBsZXQgbG9jYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJyk7XHJcbiAgICAvLyBQYXJzZSBKU09OXHJcbiAgICBjYW5kaWRhdGVzID0gSlNPTi5wYXJzZShsb2NhdGlvbi5kYXRhc2V0LmNhbmRpZGF0ZXMpO1xyXG4gICAgLy8gSWYgb25seSBvbmUgY2FuZGlkYXRlIGF0IGxvY2F0aW9uLCBzZXQgbG9jYXRpb24ncyB2YWx1ZVxyXG4gICAgaWYgKGNhbmRpZGF0ZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICBsb2NhdGlvbi52YWx1ZSA9IGNhbmRpZGF0ZXNbMF07XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gUmV0dXJucyB0cnVlIGlmIGlucHV0IGhhcyBhIG51bWVyaWNhbCB2YWx1ZVxyXG5mdW5jdGlvbiBpc1NvbHZlZChyb3csIGNvbCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKS52YWx1ZSA/IHRydWUgOiBmYWxzZTtcclxufVxyXG5cclxuXHJcbi8qIHJlbW92ZU90aGVyQ2FuZGlkYXRlcygpIG5vdCBjdXJyZW50bHkgbmVlZGVkXHJcbmJ1dCBJJ20gbGVhdmluZyB0aGUgY29kZSBpbiBoZXJlIGluIGNhc2UgSSBuZWVkIGl0IGxhdGVyISAqL1xyXG5cclxuLy8gLy8gUmVtb3ZlIGFsbCBjYW5kaWRhdGVzIGF0IGxvY2F0aW9uIGV4Y2VwdCB2YWx1ZVxyXG4vLyBmdW5jdGlvbiByZW1vdmVPdGhlckNhbmRpZGF0ZXMocm93LCBjb2wpIHtcclxuLy8gICAgIGxldCB2YWx1ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKS52YWx1ZTtcclxuLy8gICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKS5kYXRhc2V0LmNhbmRpZGF0ZXMgPSAnWycgKyB2YWx1ZSArICddJztcclxuXHJcbi8vICAgICAvLyBEZWJ1ZyBsb2dcclxuLy8gICAgIGNvbnNvbGUubG9nKCdFbXB0aWVkIGFsbCBidXQgJyArIHZhbHVlICsgJyBhdCAnICsgcm93ICsgJzonICsgY29sICsnIScpO1xyXG4vLyAgICAgY29uc29sZS5sb2coZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl1bZGF0YS1jb2w9XCInICsgY29sICsgJ1wiXScpKTtcclxuLy8gfSJdfQ==
