function solve(){for(i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)&&eliminateCorrespondingCandidates(i,j);for(i=1;i<=9;i++)for(j=1;j<=9;j++)isSolved(i,j)||(checkForSingleCandidate(i,j),console.log("Solve attempted at "+i+":"+j+"!"))}function eliminateCorrespondingCandidates(e,t){let a=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]'),o=a.value,d=a.parentElement.children;console.log(d);let n=Array.from(d);console.log(n);let l=n.filter(e=>!isSolved(e.dataset.row,e.dataset.col));console.log(l),l.forEach(function(e){removeCandidate(parseInt(e.dataset.row),parseInt(e.dataset.col),parseInt(o))}),console.log(l)}function removeCandidate(e,t,a){let o=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]'),d=JSON.parse(o.dataset.candidates);d=d.filter(e=>e!==a);let n=JSON.stringify(d);document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').dataset.candidates=n,console.log("Removed candidate "+a+" at "+e+":"+t+"!")}function checkForSingleCandidate(e,t){let a=document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]');candidates=JSON.parse(a.dataset.candidates),1==candidates.length&&(document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').value=candidates[0])}function isSolved(e,t){return!!document.querySelector('[data-row="'+e+'"][data-col="'+t+'"]').value}document.getElementById("solve").addEventListener("click",solve),document.querySelectorAll("input[type=number]").forEach(function(e){e.addEventListener("change",function(){this.dataset.candidates="["+this.value+"]",console.log(this)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBFdmVudCBsaXN0ZW5lcnMgZm9yIGlucHV0cyAqL1xyXG5cclxuLy8gRXZlbnQgbGlzdGVuZXIgZm9yIFwiU3VibWl0XCIgYnV0dG9uXHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb2x2ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc29sdmUpO1xyXG5cclxuLy8gRXZlbnQgbGlzdGVuZXIgZm9yIGFsbCBpbnB1dHNcclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1udW1iZXJdJykuZm9yRWFjaChmdW5jdGlvbiAoaW5wKSB7XHJcbiAgICBpbnAuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNldCB0aGlzIGlucHV0J3MgY2FuZGlkYXRlcyB0byBvbmx5IHRoaXMgaW5wdXQncyB2YWx1ZVxyXG4gICAgICAgIHRoaXMuZGF0YXNldC5jYW5kaWRhdGVzID0gJ1snICsgdGhpcy52YWx1ZSArICddJztcclxuXHJcbiAgICAgICAgLy8gRGVidWcgbG9nXHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcyk7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG4vLyBJdGVyYXRlIHRocm91Z2ggaW5wdXRzIHRyeWluZyB0byBzb2x2ZVxyXG5mdW5jdGlvbiBzb2x2ZSgpIHtcclxuICAgIC8vIEhhbmRsZSBzb2x2ZWQgaW5wdXRzXHJcbiAgICBmb3IgKGkgPSAxOyBpIDw9IDk7IGkrKykge1xyXG4gICAgICAgIGZvciAoaiA9IDE7IGogPD0gOTsgaisrKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHNvbHZlZCwgZWxpbWluYXRlIGNvcnJlc3BvbmRpbmcgY2FuZGlkYXRlcyBpbiBvdGhlciBwb3NpdGlvbnNcclxuICAgICAgICAgICAgaWYgKGlzU29sdmVkKGksIGopKSB7XHJcbiAgICAgICAgICAgICAgICBlbGltaW5hdGVDb3JyZXNwb25kaW5nQ2FuZGlkYXRlcyhpLCBqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIEhhbmRsZSB1bnNvbHZlZCBpbnB1dHNcclxuICAgIGZvciAoaSA9IDE7IGkgPD0gOTsgaSsrKSB7XHJcbiAgICAgICAgZm9yIChqID0gMTsgaiA8PSA5OyBqKyspIHtcclxuICAgICAgICAgICAgLy8gSWYgdW5zb2x2ZWQsIGF0dGVtcHQgdG8gc29sdmVcclxuICAgICAgICAgICAgaWYgKCFpc1NvbHZlZChpLCBqKSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tGb3JTaW5nbGVDYW5kaWRhdGUoaSwgaik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRGVidWcgbG9nXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU29sdmUgYXR0ZW1wdGVkIGF0ICcgKyBpICsgJzonICsgaiArICchJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsaW1pbmF0ZUNvcnJlc3BvbmRpbmdDYW5kaWRhdGVzKHJvdywgY29sKSB7XHJcbiAgICBcclxuICAgIC8qIEVsaW1pbmF0ZSBjYW5kaWRhdGVzIGluIGdyb3VwICovXHJcblxyXG4gICAgLy8gR2V0IHZhbHVlIGF0IGxvY2F0aW9uXHJcbiAgICBsZXQgbG9jYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJyk7XHJcbiAgICBsZXQgdmFsdWUgPSBsb2NhdGlvbi52YWx1ZTtcclxuICAgIC8vIEdldCBwYXJlbnRcclxuICAgIGxldCBwYXJlbnREaXYgPSAobG9jYXRpb24ucGFyZW50RWxlbWVudCk7XHJcbiAgICAvLyBHZXQgYWxsIHNpYmxpbmdzXHJcbiAgICBsZXQgaW5wdXRDb2xsZWN0aW9uID0gcGFyZW50RGl2LmNoaWxkcmVuO1xyXG4gICAgY29uc29sZS5sb2coaW5wdXRDb2xsZWN0aW9uKTtcclxuICAgIC8vIENvbnZlcnQgSFRNTENvbGxlY3Rpb24gdG8gYW4gYXJyYXlcclxuICAgIGxldCBpbnB1dEFycmF5ID0gQXJyYXkuZnJvbShpbnB1dENvbGxlY3Rpb24pO1xyXG4gICAgY29uc29sZS5sb2coaW5wdXRBcnJheSk7XHJcbiAgICAvLyBSZW1vdmUgc29sdmVkIGlucHV0cyBmcm9tIGFycmF5XHJcbiAgICBsZXQgcmVzdWx0ID0gaW5wdXRBcnJheS5maWx0ZXIoZWxlbWVudCA9PiAhKGlzU29sdmVkKGVsZW1lbnQuZGF0YXNldC5yb3csIGVsZW1lbnQuZGF0YXNldC5jb2wpKSk7XHJcbiAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xyXG4gICAgLy8gUmVtb3ZlIHZhbHVlIGZyb20gcmVtYWluaW5nIGNhbmRpZGF0ZXNcclxuICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpe1xyXG4gICAgICAgIHJlbW92ZUNhbmRpZGF0ZShwYXJzZUludChlbGVtZW50LmRhdGFzZXQucm93KSwgcGFyc2VJbnQoZWxlbWVudC5kYXRhc2V0LmNvbCksIHBhcnNlSW50KHZhbHVlKSk7XHJcbiAgICB9KVxyXG4gICAgLy8gRGVidWcgbG9nXHJcbiAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xyXG5cclxuXHJcbiAgICAvLyBUT0RPIGVsaW1pbmF0ZSBjYW5kaWRhdGVzIGluIHJvd1xyXG4gICAgLy8gVE9ETyBlbGltaW5hdGUgY2FuZGlkYXRlcyBpbiBjb2xcclxuXHJcbn1cclxuXHJcbi8vIFJlbW92ZSB2YWx1ZSBmcm9tIGNhbmRpZGF0ZXMgYXQgbG9jYXRpb24gKHJvdy9jb2wpXHJcbmZ1bmN0aW9uIHJlbW92ZUNhbmRpZGF0ZShyb3csIGNvbCwgdmFsdWUpIHtcclxuICAgIC8vIFNlbGVjdCBsb2NhdGlvbiBkZXBlbmRpbmcgb24gcm93IGFuZCBjb2xcclxuICAgIGxldCBsb2NhdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdz1cIicgKyByb3cgKyAnXCJdW2RhdGEtY29sPVwiJyArIGNvbCArICdcIl0nKTtcclxuICAgIC8vIFBhcnNlIEpTT05cclxuICAgIGxldCBjYW5kaWRhdGVzID0gSlNPTi5wYXJzZShsb2NhdGlvbi5kYXRhc2V0LmNhbmRpZGF0ZXMpO1xyXG4gICAgLy8gUmVtb3ZlIHZhbHVlIGZyb20gY2FuZGlkYXRlcyBhcnJheVxyXG4gICAgY2FuZGlkYXRlcyA9IGNhbmRpZGF0ZXMuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gdmFsdWUpO1xyXG4gICAgLy8gQ29udmVydCBiYWNrIGludG8gSlNPTiBvYmplY3RcclxuICAgIGxldCByZXN1bHQgPSBKU09OLnN0cmluZ2lmeShjYW5kaWRhdGVzKTtcclxuICAgIC8vIFVwZGF0ZSBkYXRhLWNhbmRpZGF0ZXMgYXR0cmlidXRlIGF0IGxvY2F0aW9uXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJykuZGF0YXNldC5jYW5kaWRhdGVzID0gcmVzdWx0O1xyXG5cclxuICAgIC8vIERlYnVnIGxvZ1xyXG4gICAgY29uc29sZS5sb2coJ1JlbW92ZWQgY2FuZGlkYXRlICcgKyB2YWx1ZSArICcgYXQgJyArIHJvdyArICc6JyArIGNvbCArICchJyk7XHJcbn1cclxuXHJcbi8vIElmIHRoZXJlIGlzIG9ubHkgb25lIGNhbmRpZGF0ZSBhdCBsb2NhdGlvbiwgc2V0IHRoYXQgaW5wdXQncyB2YWx1ZSB0byB0aGUgY2FuZGlkYXRlXHJcbmZ1bmN0aW9uIGNoZWNrRm9yU2luZ2xlQ2FuZGlkYXRlKHJvdywgY29sKSB7XHJcbiAgICAvLyBTZWxlY3QgbG9jYXRpb24gZGVwZW5kaW5nIG9uIHJvdyBhbmQgY29sXHJcbiAgICBsZXQgbG9jYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJyk7XHJcbiAgICAvLyBQYXJzZSBKU09OXHJcbiAgICBjYW5kaWRhdGVzID0gSlNPTi5wYXJzZShsb2NhdGlvbi5kYXRhc2V0LmNhbmRpZGF0ZXMpO1xyXG4gICAgaWYgKGNhbmRpZGF0ZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJykudmFsdWUgPSBjYW5kaWRhdGVzWzBdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBSZXR1cm5zIHRydWUgaWYgaW5wdXQgaGFzIGEgbnVtZXJpY2FsIHZhbHVlXHJcbmZ1bmN0aW9uIGlzU29sdmVkKHJvdywgY29sKSB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl1bZGF0YS1jb2w9XCInICsgY29sICsgJ1wiXScpLnZhbHVlID8gdHJ1ZSA6IGZhbHNlO1xyXG59XHJcblxyXG5cclxuLyogcmVtb3ZlT3RoZXJDYW5kaWRhdGVzKCkgbm90IGN1cnJlbnRseSBuZWVkZWRcclxuYnV0IEknbSBsZWF2aW5nIHRoZSBjb2RlIGluIGhlcmUgaW4gY2FzZSBJIG5lZWQgaXQgbGF0ZXIhICovXHJcblxyXG4vLyAvLyBSZW1vdmUgYWxsIGNhbmRpZGF0ZXMgYXQgbG9jYXRpb24gZXhjZXB0IHZhbHVlXHJcbi8vIGZ1bmN0aW9uIHJlbW92ZU90aGVyQ2FuZGlkYXRlcyhyb3csIGNvbCkge1xyXG4vLyAgICAgbGV0IHZhbHVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl1bZGF0YS1jb2w9XCInICsgY29sICsgJ1wiXScpLnZhbHVlO1xyXG4vLyAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm93PVwiJyArIHJvdyArICdcIl1bZGF0YS1jb2w9XCInICsgY29sICsgJ1wiXScpLmRhdGFzZXQuY2FuZGlkYXRlcyA9ICdbJyArIHZhbHVlICsgJ10nO1xyXG5cclxuLy8gICAgIC8vIERlYnVnIGxvZ1xyXG4vLyAgICAgY29uc29sZS5sb2coJ0VtcHRpZWQgYWxsIGJ1dCAnICsgdmFsdWUgKyAnIGF0ICcgKyByb3cgKyAnOicgKyBjb2wgKychJyk7XHJcbi8vICAgICBjb25zb2xlLmxvZyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yb3c9XCInICsgcm93ICsgJ1wiXVtkYXRhLWNvbD1cIicgKyBjb2wgKyAnXCJdJykpO1xyXG4vLyB9Il19
